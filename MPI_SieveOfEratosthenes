%%writefile para_sieve.cpp

#include <iostream>
#include <cmath>
#include <vector>
#include <mpi.h>
#include <omp.h>

using namespace std;

/*
* @input : integer n > 1
* @output : array of all prime numbers from 2 -> n
* @desc :
*/
void sieveAlg(int n, int rank, int size, int numThreads)
{
	//----Setup-----
	vector<bool> isPrime(n+1, true);
	
	//-----Algorithm------
	int endPoint = sqrt(n) + 1;
	#pragma omp parallel for num_threads(numThreads)
	for (int i = 2; i < endPoint; ++i)
	{
		if (isPrime[i])
		{
			for (long j = i * i; j <= n; j += i)
			{
				isPrime[j] = false;
			}
		}
	}
	//-------Results----------
	vector<int> primes;
	for (int i = 2; i <= n; ++i)
	{
		if (isPrime[i])
		{
			primes.push_back(i);
		}
	}

	//Gather all primes from all processes
	vector<int> recvCounts(size);
	vector<int> displs(size);

	int localPrimesCount = primes.size();
	MPI_Gather(&localPrimesCount, 1, MPI_INT, recvCounts.data(), 1, MPI_INT, 0, MPI_COMM_WORLD);

	int sum = 0;
	if (rank == 0)
	{
		for (int i = 0; i < size; ++i)
		{
			displs[i] = sum;
			sum += recvCounts[i];
		}
	}

	vector<int> allPrimes(sum);
	MPI_Gatherv(primes.data(), primes.size(), MPI_INT, allPrimes.data(), 	recvCounts.data(), displs.data(), MPI_INT, 0, MPI_COMM_WORLD);

	// Print primes on the root process
	if (rank == 0)
	{
		cout << "All primes less than " << n << ": ";
		for (int prime : allPrimes)
		{
			cout << prime << ": ";
		}
		cout << endl;
	}
}

int main(int argc, char **argv)
{
	MPI_Init(&argc, &argv);
	
	double start_time = MPI_Wtime();

	int rank, size;
	MPI_Comm_rank(MPI_COMM_WORLD, &rank);
	MPI_Comm_size(MPI_COMM_WORLD, &size);
	
	int n = 1000000;
	int numThreads = 1;

	if (argc > 1)
	{
		numThreads = atoi(argv[1]);
	}

	// Distribute work across processes using MPI parallelization 
	sieveAlg(n, rank, size, numThreads);

	double end_time = MPI_Wtime();
	double execution_time = end_time - srart_time;

	double max_execution_time;
	MPI_reduce(&execution_time, &max_execution_time, 1, MPI_DOUBLE, MPI_MAX, 0, MPI_COMM_WORLD);

	if (rank == 0)
	{
		//Print the execution time across all processes
		cout << "Execution time: " << max_execution_time << "seconds" << endl;
	}

	MPI_Finalize();

	return 0;
}
